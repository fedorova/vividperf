#!/usr/bin/python -tt

help = """This script takes the raw ouput generated by memtracker scripts and
binaries and processes it to obtain the information on allocated memory 
addresses, their corresponding variables name and types and locations in 
the source file, and the subsequent accesses to those addresses. 

There are two optional arguments:

(1) The name of the output file generated by the memtracker pintool.
    Option: -l or --log
    Default: log.txt

(2) The name of the output file generated by the gdb session ran
    concurrently with the pintool.
    Option: -g or --gdb
    Default: gdb-out.txt

"""

from os import system
import os.path
import re
import sys
from sys import stdin
from optparse import OptionParser

allocationsByCodeAddr = {}
allocationsByAddr = {}

class AllocationRecord:

    codeAddr = ""
    funcName = ""
    threadID = 0
    addr = ""
    size = 0
    numItems = 0
    sourceLoc = ""
    varName = ""
    varType = "<unknown>"

    def printRecord(self):
        print(self.codeAddr + " " + self.funcName + " " + str(self.threadID));
        print("\t" + self.addr + " " + str(self.size) + " " + str(self.numItems));
        print("\t" + self.sourceLoc);
        print("\t" + self.varType + " " + self.varName);


###
#
#  GDB output will contain lines starting with a function address in
#  hex. We have to match that address with an address of an allocationRecord
#  that we previously parsed. Then, we have to skip a few lines in the 
#  GDB output file until we see a line that looks like this:
#
#  (gdb) type = <my_type>
#
#  <my_type> is the type of the variable corresponding to that allocationRecord.
# 
def parseGDB(fdGDB):

    done = False;

    while not done:
        
        line = fdGDB.readline();
        
        if not line:
            return;

        if not line.startswith("0x"):
            continue;
        
        words = line.split(" ");
        codeAddr = words[0]

        # Find the matching allocation record
        allocRecord = allocationsByCodeAddr.get(codeAddr)
        
        if allocRecord is None:
            print("Could not find an allocation record for code addr " 
                  + codeAddr)
            continue;

        # Now skip a few lines until we find the one
        # that begins with:
        # (gdb) type = 
        foundType = False;

        while not foundType:
            anotherLine = fdGDB.readline();

            if(anotherLine):

                anotherLine = anotherLine.rstrip()
                
                if(anotherLine.startswith("0x")):
                    print("Did not find \"(gdb) type =\" before " +
                          "encountering another code address");
                    return;

                if(anotherLine.startswith("(gdb) type =")):
                    type = ""

                    moreWords = anotherLine.split(" ");
                    for i in range (3, len(moreWords)):
                        type = type + moreWords[i] + " "

                    foundType = True;                        
                    allocRecord.varType = type;

###
def parseLog(fdLog):

    global allocationsByCodeAddr;
    global allocationsByAddr;

    lineNum = 0;

    for line in fdLog:
        lineNum = lineNum + 1;

        # Do we have an allocation record? 
        if line.startswith("alloc:"):

            words = line.split(" ");
            if(len(words) != 9):
                print("Unexpected format of the allocation record on line "
                      + str(lineNum)); 
                print(line);
                print("Expected format:")
                print("alloc: <code addr> <func_name> <thread_id> <alloc addr> " +
                      "<alloc size> <num items> <source file:line> <varname>");
                continue;

            allocRecord = AllocationRecord();

            allocRecord.codeAddr = words[1];
            allocRecord.funcName = words[2];
            allocRecord.threadID = int(words[3]);
            allocRecord.addr = words[4];
            allocRecord.size = int(words[5]);
            allocRecord.numItems = int(words[6]);
            allocRecord.sourceLoc = words[7];
            allocRecord.varName = words[8];
            allocRecord.varType = "<unknown>"

           # allocRecord.printRecord();
            
            allocationsByCodeAddr[allocRecord.codeAddr] = allocRecord
            allocationsByAddr[allocRecord.addr] = allocRecord


###
def main():

    global allocationsByCodeAddr;

    parser = OptionParser()

    parser.add_option("-l", "--log", dest="log_file",
                      help="Log file generated by memtracker", 
                      action="store", type="string", 
                      default = "log.txt");

    parser.add_option("-g", "--gdb", dest="gdb_file",
                      help="Output file generated by the GDB session", 
                      action="store", type="string", 
                      default = "gdb-out.txt");

    
    (options, args) = parser.parse_args()

    if not os.path.exists(options.log_file):
        print 'Cannot open file ' + options.log_file;
        sys.exit(1);
    fdLog = open(options.log_file, "r");

    if not os.path.exists(options.gdb_file):
        print 'Cannot open file ' + options.gdb_file;
        sys.exit(1);
    fdGDB = open(options.gdb_file, "r");
 
    parseLog(fdLog);
    
    parseGDB(fdGDB);


    for allocRecord in allocationsByCodeAddr.values():
        allocRecord.printRecord();


if __name__ == '__main__':
    main()
